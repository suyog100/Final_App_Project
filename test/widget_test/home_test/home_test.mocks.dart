// Mocks generated by Mockito 5.4.4 from annotations
// in finalproject/test/widget_test/home_test/home_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:finalproject/core/failure/product_failure.dart' as _i6;
import 'package:finalproject/features/menu/domain/entity/get_product_entity.dart'
    as _i7;
import 'package:finalproject/features/menu/domain/repository/product_repository.dart'
    as _i2;
import 'package:finalproject/features/menu/domain/usecase/product_usecase.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProductRepository_0 extends _i1.SmartFake
    implements _i2.IProductRepository {
  _FakeIProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductUsecase extends _i1.Mock implements _i4.ProductUsecase {
  MockProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeIProductRepository_0(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i2.IProductRepository);

  @override
  _i5.Future<
      _i3.Either<_i6.ProductFailure, List<_i7.GetProductEntity>>> getAllProduct(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [page],
        ),
        returnValue: _i5.Future<
                _i3
                .Either<_i6.ProductFailure, List<_i7.GetProductEntity>>>.value(
            _FakeEither_1<_i6.ProductFailure, List<_i7.GetProductEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [page],
          ),
        )),
      ) as _i5
          .Future<_i3.Either<_i6.ProductFailure, List<_i7.GetProductEntity>>>);

  @override
  _i5.Future<_i3.Either<_i6.ProductFailure, List<_i7.GetProductEntity>>>
      getProductsByCategory(
    String? category,
    int? page,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getProductsByCategory,
              [
                category,
                page,
              ],
            ),
            returnValue: _i5.Future<
                    _i3.Either<_i6.ProductFailure,
                        List<_i7.GetProductEntity>>>.value(
                _FakeEither_1<_i6.ProductFailure, List<_i7.GetProductEntity>>(
              this,
              Invocation.method(
                #getProductsByCategory,
                [
                  category,
                  page,
                ],
              ),
            )),
          ) as _i5.Future<
              _i3.Either<_i6.ProductFailure, List<_i7.GetProductEntity>>>);
}
